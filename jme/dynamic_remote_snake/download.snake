"""
if you include this workflow and pass file names through remote_wrapper()
snakemake will download file to local copy first

remote_wrapper returns the input if the input is a local file path. It returns
the path to the downloaded file if the file is a remote url
or matches any of the configured patterns.

This allows a workflow to be designed to accept either remote or local files
from the configuration. It can even work for glob_wildcard strings, just add
glob=True to the remote_wrapper call!

There are two mechanisms for finding files:

    1) protocol prefix
    If a file path looks like a remote path (eg starts with SFTP), then the
    appropriate remote is used. Works for SFTP, SCP, FTP, HTTP

    2) custom translator
    A user can supply a set of regular_expression patterns to identify paths
    that may be available remotely and translate them into remote urls

There are three mechanisms for transferring files:
   1) Snakemake Remotes for any protocol support by snakemake
   2) rsync (for STFP files) for checksummed transfers, 
      set config:remote:SFTP:user_rsync:True
   3) stagecache: put downloaded files in central shared location for use by
      others and potential future re-use. Configure path in:
      config:remote:cache:path:/path/to/cache
      see stage cache for documentation

Important NOTES:

    * The workflow MUST pass a file through remote wrapper for this to work
    * SFTP wildcards are expended with the SFTP module, but rsync is used to
    download (bc it does checksums)
    This loses snakemake's ability to notice changes to remote files. :(
    * by default, SFTP uses the 'readonly' user with no passwd, this can be
    changed in the config. Passwords are not supported because it was
    complicated to do so with rsync and because its a horribl idea to put
    passwords in config files.

Example custom config:

remote:
    mappings:
        - pattern: "(/mnt/([^/]+)/.+)"
          host_repl: "\\2.subnet.hawaii.edu"
          path_repl: "\\1"
    SFTP:
        use_rsync: True
        default:
            username: jmeppley
        public.server.edu:
            username: anonymous
    cache:
        path: /path/to/shared_cahce
        exclude:
            - /mnt/sequencingdata

"""
from snakemake import logger
from jme.dynamic_remote_snake.remote import remote_wrapper
# dictionary for tracking remote files
download_map = config.setdefault('download_map', {})

if 'cache' in config.get('remote',{}):
    rule download_cache:
        output: config['remote']['cache']['path'] + "/{dl_path}"
        params:
            url=lambda w: download_map[w.dl_path]['url'],
            atype=lambda w: "-a {}".format(download_map[w.dl_path]['atype']) \
                            if 'atype' in download_map[w.dl_path] \
                            else ""
        resources:
            disk=1,
            download=1,
            mem_mb=1000
        shell: """
                stagecache {params.atype} -c {config[remote][cache][path]} \
                    {params.url}
                # hack to deal with prefixes
                if [ $? -eq 0 ]; then
                    touch {output}
                fi
               """

if config.get('remote', {}).get('SFTP', {}).get('use_rsync', True):
    logger.debug("LOADING rsync rule")
    rule download_rsync:
        output: temp("rsync/{dl_path}")
        params:
            host=lambda w: download_map[w.dl_path]['host'],
            remote_path=lambda w: download_map[w.dl_path]['remote_path'],
            user=lambda w: download_map[w.dl_path]['user'],
            dl_path=lambda w: os.path.dirname("rsync/" + w.dl_path)
        resources:
            disk=1,
            download=1,
            mem_mb=1000
        shell: """
                mkdir -p {params.dl_path}
                rsync -a {params.user}@{params.host}:{params.remote_path} {params.dl_path}
               """
else:

    # snakemake remotes don't work with slurm
    localrules: download_remote

    rule download_remote:
        """
        Uses snakemake remote mechanism to download file 
        and creates temporary symlink in remote/ to avoid name collisions
        """
        input: lambda w: download_map[w.dl_path]['remote']
        output: config.get('remote_path', 'remote') + "/{dl_path}"
        resources:
            disk=1,
            download=1,
            mem_mb=1000
        shell: """
                rm -f {output}
                mv {input} {output}
               """
